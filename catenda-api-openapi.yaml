openapi: 3.0.3
info:
  title: API Reference
  version: '1.0'
externalDocs:
  description: Find out more about the Catenda API
  url: 'https://apidocs.dev.catenda.net/catenda-api'
servers:
  - url: 'https://api.catenda.com/v2'
tags:
  - name: Authentication
  - name: Collection
  - name: Custom Field
  - name: IFC
  - name: Label
  - name: Label Group
  - name: Library
  - name: Member
  - name: Model
  - name: Model Revision
  - name: Project
  - name: Organization
  - name: SCIM
  - name: Team
  - name: Topic Board
  - name: User
  - name: Viewer
  - name: Webhook
security:
  - OAuth: []
paths:
  /oauth2/token:
    post:
      tags:
        - Authentication
      summary: Create token
      operationId: getToken
      description: Create an OAuth access token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
              properties:
                client_id:
                  type: string
                  description: Client id when performing client credentials flow
                  example: 6eRUYFr3UTFevHr
                client_secret:
                  type: string
                  description: Client secret when performing client credentials flow
                code:
                  type: string
                  description: Authorization code when performing authorization code flow
                  example: dlZE0KFxhM
                code_verifier:
                  type: string
                  description: 'Client generated cryptographically random string using the characters A-Z, a-z, 0-9, and the punctuation characters -._~, between 43 and 128 characters long. Used when performing PKCE authorization code flow.'
                  example: fRhtRGw_56Jukt_-YNF3KyYsBrgW5JKtRiN7w7YGFgJ
                grant_type:
                  type: string
                  description: 'The grant type of the desired authentication flow. Valid values are authorization_code, refresh_token and client_credentials'
                  example: authorization_code
                redirect_uri:
                  type: string
                  description: The registered redirect URL of the application when performing authorization code flow
                  example: https//www.example.com/login
                refresh_token:
                  type: string
                  description: The refresh token when performing refresh token flow
                  example: ozJ7c4OtELJNrWp4KMC4uE
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    access_token:
                      type: string
                      description: The access token to authorize Catenda APIs
                      example: 4Zie1q4iz98hYitnObJHgV
                    expires_in:
                      type: string
                      description: Lifetime in seconds of the access token
                      example: 3599
                    refresh_token:
                      type: string
                      description: 'The refresh token, used to obtain new access tokens'
                      example: ozJ7c4OtELJNrWp4KMC4uE
                    token_type:
                      type: string
                      description: 'The token type, valid values are **bearer**'
                      example: bearer
  '/projects/{project-id}/libraries/collections':
    get:
      tags:
        - Collection
      summary: List collections
      operationId: getCollections
      description: List all document library item collections.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-page'
        - $ref: '#/components/parameters/library-page-size'
        - $ref: '#/components/parameters/library-item-created-at-from'
        - $ref: '#/components/parameters/library-item-created-at-to'
        - $ref: '#/components/parameters/collection-created-by'
        - $ref: '#/components/parameters/collection-fields'
        - $ref: '#/components/parameters/collection-files'
        - $ref: '#/components/parameters/collection-finalized'
        - $ref: '#/components/parameters/collection-follow-latest-revision'
        - $ref: '#/components/parameters/collection-followers'
        - $ref: '#/components/parameters/collection-library-items'
        - $ref: '#/components/parameters/collection-search'
        - $ref: '#/components/parameters/collection-shared-by'
        - $ref: '#/components/parameters/collection-visibility'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/collection'
    post:
      tags:
        - Collection
      summary: Create collection
      operationId: createCollection
      description: |
        Add a new document library item collection.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The name of the library item collection.
                  example: Collection 1
                description:
                  type: string
                  description: The description of the library item collection.
                  example: Collection description
                items:
                  type: array
                  description: List of items to add to the colleciton.
                  items:
                    type: object
                    required:
                      - libraryId
                      - libraryItemId
                      - fileId
                    properties:
                      libraryId:
                        type: string
                        description: The library id of the library item.
                        example: ead9b194e6024e6b92cae1d791797b68
                      libraryItemId:
                        type: string
                        description: The id of the library item.
                        example: 5badf33213ae420ebf81e727d5281850
                      fileId:
                        type: string
                        description: 'The id of the library item revision, defaults to the latest document revision id.'
                        example: 5dc75452-29a4-4c4a-8415-991b92a92001
                followLatestRevision:
                  type: boolean
                  description: Set whether the collection uses the latest revision of all items or the revision when added to the collection.
                  example: true
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
  '/projects/{project-id}/libraries/collections/{collection-id}':
    get:
      tags:
        - Collection
      summary: Get collections
      operationId: getCollection
      description: Get a single document library item collection.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/collection-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
    patch:
      tags:
        - Collection
      summary: Update collection
      operationId: updateCollection
      description: Update a document library item collection.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/collection-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the library item collection.
                  example: Collection 1
                description:
                  type: string
                  description: The description of the library item collection.
                  example: Collection description
                finalized:
                  type: boolean
                  description: Whether the collection is finalized and no longer editable.
                  example: false
                visibility:
                  type: string
                  description: Determines whether the collection is shared at the project level. Valid values are **private** and **project-members**.
                  example: private
                followLatestRevision:
                  type: boolean
                  description: Set whether the collection uses the latest revision of all items or the revision when added to the collection.
                  example: true
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collection'
  '/projects/{project-id}/libraries/collections/{collection-id}/items':
    get:
      tags:
        - Collection
      summary: List collection items
      operationId: getCollectionItems
      description: List all document library item collection items.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/collection-id'
        - $ref: '#/components/parameters/collection-fields'
        - $ref: '#/components/parameters/collection-include'
        - $ref: '#/components/parameters/collection-library-item-include'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/collection-item'
    post:
      tags:
        - Collection
      summary: Add collection items
      operationId: createCollectionItems
      description: Add items to a document library item collection.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/collection-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    type: object
                    required:
                      - libraryId
                      - libraryItemId
                      - fileId
                    properties:
                      libraryId:
                        type: string
                        description: The library id of the library item.
                        example: ead9b194e6024e6b92cae1d791797b68
                      libraryItemId:
                        type: string
                        description: Id of the library item.
                        example: 5badf33213ae420ebf81e727d5281850
                      fileId:
                        type: string
                        description: Id of the library item revision.
                        example: 5dc75452-29a4-4c4a-8415-991b92a92001
                options:
                  type: object
                  properties:
                    duplicateItemOption:
                      type: string
                      description: Determines the behaviour when attempting to add a library item with the same library item id as a library item already in the collection. In this case the request will fail by default. There are 3 options you can choose from to deal with this situation. **overwrite-different-version** will override the existing library items with the new ones. **skip-duplicate-with-different-version** will ignore provided library items that are already in the collection. **skip-duplicate-with-same-version** will fail the request if any library item is already in the collection with a different revision.
                      example: overwrite-different-version
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/collection-item'
    delete:
      tags:
        - Collection
      summary: Remove collection item
      operationId: deleteCollectionItem
      description: Remove a document library item collection item from the collection.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/collection-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  description: List of library items ids of the items to remove from the collection.
                  items:
                    type: string
                    description: Id of the document library item
                    example: f9f534a6d26441gc85ffc686bacbc9e3
      responses:
        '204':
          $ref: '#/components/responses/204'
  '/projects/{project-id}/libraries/collections/{collection-id}/followers':
    get:
      tags:
        - Collection
      summary: List collection followers
      operationId: getCollectionFollowers
      description: List all the followers of a document library item collection.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/collection-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
    post:
      tags:
        - Collection
      summary: Add collection follower
      operationId: createCollectionFollower
      description: |
        Add a new follower to a document library item collection.

        Private collections can only have collection owner as a follower. If the collection is shared at the project level users can add themselves as a follower. Collection owners and administrators can add any user as a follower.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/collection-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: Id of the user to follow the collection.
                  example: 524809076a694255b989d236517a55da
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
  '/projects/{project-id}/libraries/collections/{collection-id}/followers/batch':
    patch:
      tags:
        - Collection
      summary: Update collection followers
      operationId: updateCollectionFollowers
      description: |
        Update multiple followers on a document library item collection.

        This resource is only available to project administrators and collection owners.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/collection-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                followersToAdd:
                  type: array
                  description: List of user ids of users to add as followers of the document library item collection.
                  items:
                    type: string
                    example: 524809076a694255b989d236517a55da
                followersToRemove:
                  type: array
                  description: List of user ids of users to remove as followers of the document library item collection.
                  items:
                    type: string
                    example: 524809076a694255b989d236517a55da
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
  '/projects/{project-id}/libraries/collections/{collection-id}/followers/{user-id}':
    delete:
      tags:
        - Collection
      summary: Remove collection follower
      operationId: deleteCollectionFollower
      description: |
        Remove a follower from a document library item collection.

        If the collection is private only the collection owner can remove themselves as a follower. If the collection is shared at the project level users can remove themselves as a follower. Collection owners and administrators can remove any user as a follower.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/collection-id'
        - $ref: '#/components/parameters/user-id'
      responses:
        '204':
          $ref: '#/components/responses/204'
  '/projects/{project-id}/custom-fields':
    get:
      tags:
        - Custom Field
      summary: List custom fields
      operationId: getCustomFields
      description: List all the custom fields.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - name: archived
          in: query
          description: 'Filter by archived status. Valid values are **all**, **archived**, **not-archived**. Default value is **all**.'
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/custom-field'
    post:
      tags:
        - Custom Field
      summary: Create custom field
      operationId: createCustomField
      description: Add a new custom field.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - description
                - type
              properties:
                name:
                  type: string
                  description: The name of the custom field.
                  example: Custom field 1
                description:
                  type: string
                  description: Description of the custom field.
                  example: Custom field description
                type:
                  type: string
                  description: 'Type of the custom field. Valid values are **text**, **integer**, **double**, or **enumeration**.'
                  example: 397t0ccc8f74619096c738de15dc6512
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-field'
  '/projects/{project-id}/custom-fields/{custom-field-id}':
    get:
      tags:
        - Custom Field
      summary: Get custom field
      operationId: getCustomField
      description: Get a single custom field.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/custom-field-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-field'
    patch:
      tags:
        - Custom Field
      summary: Update custom field
      operationId: updateCustomField
      description: |
        Update a custom field.

        This resource is also where you can modify the custom field enumeration items.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/custom-field-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the custom field
                  example: Custom field 1
                description:
                  type: string
                  description: Description of the custom field
                  example: Custom field description
                archived:
                  type: boolean
                  description: Archived status.
                  example: false
                enumerationItemsToAdd:
                  type: array
                  description: Enumeration items to add to the custom field.
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                        description: The name of the enumeration item.
                        example: Item name
                      code:
                        type: string
                        description: 'The code of the item, value is unique for a custom field.'
                enumerationItemsToMove:
                  type: array
                  description: Enumeration items to reorder in the custom field.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'A unique identifier for an enumeration item, represented as compacted UUID using 32 hexadecimal characters'
                        example: 224809076a694255b589d236517a55da
                      itemBeforeId:
                        type: string
                        description: 'Determines the position this item will sit within the enumeration, provide the id of the enumeration item you want this item to appear immediately after. Set the value to null to place this item at the beginning.'
                        example: null
                        nullable: true
                enumerationItemsToDisable:
                  type: array
                  description: Enumeration items to disable in the custom field.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'A unique identifier for an enumeration item, represented as compacted UUID using 32 hexadecimal characters'
                        example: 224809076a694255b589d236517a55da
                enumerationItemsToRestore:
                  type: array
                  description: Enumeration items to restore in the custom field.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'A unique identifier for an enumeration item, represented as compacted UUID using 32 hexadecimal characters'
                        example: 224809076a694255b589d236517a55da
                enumerationItemsToRename:
                  type: array
                  description: Enumeration items to rename in the custom field.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'A unique identifier for an enumeration item, represented as compacted UUID using 32 hexadecimal characters'
                        example: 224809076a694255b589d236517a55da
                      name:
                        type: string
                        description: Name of the enumeration item.
                        example: Item name
                enumerationItemsToUpdateCode:
                  type: array
                  description: Enumeration items to update with new codes in the custom field.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'A unique identifier for an enumeration item, represented as compacted UUID using 32 hexadecimal characters'
                        example: 224809076a694255b589d236517a55da
                      code:
                        type: string
                        description: 'The code of the item, value is unique for a custom field.'
                        example: Item name
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-field'
  '/projects/{project-id}/custom-fields/{custom-field-id}/enumeration-items':
    get:
      tags:
        - Custom Field
      summary: List enumeration items
      operationId: getCustomFieldEnumerationItems
      description: List all the enumeration items of a custom field.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/custom-field-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/custom-field-enumeration'
  '/projects/{project-id}/ifc/classifications':
    get:
      tags:
        - IFC
      summary: List classifications
      operationId: getIfcClassifications
      description: List all classification entities in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-entity'
  '/projects/{project-id}/ifc/classifications/{object-id}':
    get:
      tags:
        - IFC
      summary: Get classification
      operationId: getIfcClassification
      description: Get a single classification entity.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/classification-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ifc-entity'
  '/projects/{project-id}/ifc/classifications/{object-id}/relations':
    get:
      tags:
        - IFC
      summary: List classification relations
      operationId: getIfcClassificationRelations
      description: List all the relations for a classification.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/classification-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-classification-relation'
  '/projects/{project-id}/ifc/classification_references':
    get:
      tags:
        - IFC
      summary: List classification references
      operationId: getIfcClassificationReferences
      description: List all classification reference entities in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-entity'
  '/projects/{project-id}/ifc/classification_references/{object-id}':
    get:
      tags:
        - IFC
      summary: Get classification reference
      operationId: getIfcClassificationReference
      description: Get a single classification reference entity.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/classification-reference-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ifc-entity'
  '/projects/{project-id}/ifc/classification_references/relations':
    get:
      tags:
        - IFC
      summary: List classification references relations
      operationId: getIfcClassificationReferencesRelations
      description: List all the relations for all the classification references in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-entity'
  '/projects/{project-id}/ifc/classification_references/{object-id}/relations':
    get:
      tags:
        - IFC
      summary: List classification reference relations
      operationId: getIfcClassificationReferenceRelations
      description: Get all the relations for a classification reference.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/classification-reference-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-entity'
  '/projects/{project-id}/ifc/groups':
    get:
      tags:
        - IFC
      summary: List groups
      operationId: getIfcGroups
      description: List all groups in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-type'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-group'
    post:
      tags:
        - IFC
      summary: Query groups
      operationId: queryIfcGroups
      description: Query groups in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: object
                  description: |
                    Choose which fields are included in the result, by default all are included. Use value of 1 to include the field and 0 to exclude.
                  additionalProperties:
                    type: integer
                    example: 1
                  example:
                    attributes.Name: 1
                    attributes.GlobalId: 1
                query:
                  type: object
                  description: The query object
                  example:
                    ifcType:
                      $ifcType: IfcEntity
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-group'
  '/projects/{project-id}/ifc/groups/ifctypes':
    get:
      tags:
        - IFC
      summary: Get groups type summary
      operationId: getIfcGroupsTypeSummary
      description: Get the number of instances per IFC type for groups.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
  '/projects/{project-id}/ifc/groups/{object-id}':
    get:
      tags:
        - IFC
      summary: Get group
      operationId: getIfcGroup
      description: Get a single group.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/group-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ifc-group'
  '/projects/{project-id}/ifc/groups/relations':
    get:
      tags:
        - IFC
      summary: List groups relations
      operationId: getIfcGroupsRelations
      description: List all the relations for all the groups in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-group-relation'
  '/projects/{project-id}/ifc/groups/{object-id}/relations':
    get:
      tags:
        - IFC
      summary: List group relations
      operationId: getIfcGroupRelations
      description: List all the relations for a group.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/group-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-group-relation'
  '/projects/{project-id}/ifc/layers':
    get:
      tags:
        - IFC
      summary: List layers
      operationId: getIfcLayers
      description: List all layers in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-type'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-layer'
    post:
      tags:
        - IFC
      summary: Query layers
      operationId: queryIfcLayers
      description: Query layers in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: object
                  description: |
                    Choose which fields are included in the result, by default all are included. Use value of 1 to include the field and 0 to exclude.
                  additionalProperties:
                    type: integer
                    example: 1
                  example:
                    attributes.Name: 1
                    attributes.GlobalId: 1
                query:
                  type: object
                  description: The query object
                  example:
                    ifcType:
                      $ifcType: IfcEntity
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-layer'
  '/projects/{project-id}/ifc/layers/ifctypes':
    get:
      tags:
        - IFC
      summary: Get layers type summary
      operationId: getIfcLayersTypeSummary
      description: Get the number of instances per IFC type for layers.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
  '/projects/{project-id}/ifc/layers/{object-id}':
    get:
      tags:
        - IFC
      summary: Get layer
      operationId: getIfcLayer
      description: Get a single layer.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/layer-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ifc-layer'
  '/projects/{project-id}/ifc/layers/relations':
    get:
      tags:
        - IFC
      summary: List layers relations
      operationId: getIfcLayersRelations
      description: List all the relations for all the layers in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-layer-relation'
  '/projects/{project-id}/ifc/layers/{object-id}/relations':
    get:
      tags:
        - IFC
      summary: List layer relations
      operationId: getIfcLayerRelations
      description: List all the relations for a layer.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/layer-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-layer-relation'
  '/projects/{project-id}/ifc/ownerhistory':
    get:
      tags:
        - IFC
      summary: List owner histories
      operationId: getIfcOwnerHistories
      description: List all owner history entities in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-entity'
  '/projects/{project-id}/ifc/ownerhistory/{object-id}':
    get:
      tags:
        - IFC
      summary: Get owner history
      operationId: getIfcOwnerHistory
      description: Get an owner history entity.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/owner-history-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ifc-entity'
  '/projects/{project-id}/ifc/products':
    get:
      tags:
        - IFC
      summary: List products
      operationId: getIfcProducts
      description: List all the products in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-type'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-product'
    post:
      tags:
        - IFC
      summary: Query products
      operationId: queryIfcProducts
      description: Query products in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: object
                  description: |
                    Choose which fields are included in the result, by default all are included. Use value of 1 to include the field and 0 to exclude.
                  additionalProperties:
                    type: integer
                    example: 1
                  example:
                    attributes.Name: 1
                    attributes.GlobalId: 1
                query:
                  type: object
                  description: The query object
                  example:
                    ifcType:
                      $ifcType: IfcEntity
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-product'
  '/projects/{project-id}/ifc/products/ifctypes':
    get:
      tags:
        - IFC
      summary: Get products type summary
      operationId: getIfcProductsTypeSummary
      description: Get the number of instances per IFC type for products.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
  '/projects/{project-id}/ifc/products/{object-id}':
    get:
      tags:
        - IFC
      summary: Get product
      operationId: getIfcProduct
      description: Get a single product.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/product-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ifc-product'
  '/projects/{project-id}/ifc/products/relations':
    get:
      tags:
        - IFC
      summary: List products relations
      operationId: getIfcProductsRelations
      description: List all the relations for all the products in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-product-relation'
  '/projects/{project-id}/ifc/products/{object-id}/relations':
    get:
      tags:
        - IFC
      summary: List product relations
      operationId: getIfcProductRelations
      description: List all the relations for a product.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/product-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-product-relation'
  '/projects/{project-id}/ifc/types':
    get:
      tags:
        - IFC
      summary: List types
      operationId: getIfcTypes
      description: List all the types in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-type'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-type'
    post:
      tags:
        - IFC
      summary: Query types
      operationId: queryIfcTypes
      description: Query types in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fields:
                  type: object
                  description: |
                    Choose which fields are included in the result, by default all are included. Use value of 1 to include the field and 0 to exclude.
                  additionalProperties:
                    type: integer
                    example: 1
                  example:
                    attributes.Name: 1
                    attributes.GlobalId: 1
                query:
                  type: object
                  description: The query object
                  example:
                    ifcType:
                      $ifcType: IfcEntity
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-type'
  '/projects/{project-id}/ifc/types/ifctypes':
    get:
      tags:
        - IFC
      summary: Get types type summary
      operationId: getIfcTypesTypeSummary
      description: Get the number of instances per IFC type for types.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
  '/projects/{project-id}/ifc/types/{object-id}':
    get:
      tags:
        - IFC
      summary: Get type
      operationId: getIfcType
      description: Get a single type.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/type-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ifc-type'
  '/projects/{project-id}/ifc/types/relations':
    get:
      tags:
        - IFC
      summary: List types relations
      operationId: getIfcTypesRelations
      description: List all the relations for all the types in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/ifc-model'
        - $ref: '#/components/parameters/ifc-revision'
        - $ref: '#/components/parameters/ifc-page'
        - $ref: '#/components/parameters/ifc-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-type-relation'
  '/projects/{project-id}/ifc/types/{object-id}/relations':
    get:
      tags:
        - IFC
      summary: List type relations
      operationId: getIfcTypeRelations
      description: List all the relations for a type.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/type-id'
        - $ref: '#/components/parameters/ifc-revision'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ifc-type-relation'
  '/projects/{project-id}/labels':
    get:
      tags:
        - Label
      summary: List labels
      operationId: getLabels
      description: List all the labels.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/label-include'
        - name: search
          in: query
          description: Filter by label name
          schema:
            type: string
        - name: id
          in: query
          description: |
            Filter by label ids providing a comma separated list
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label'
    post:
      tags:
        - Label
      summary: Create label
      operationId: createLabel
      description: Add a new label.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/label-include'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - color
              properties:
                name:
                  type: string
                  description: The name of the label
                  example: Label 1
                color:
                  type: string
                  description: Valid RGB hexadecimal color of the label
                  example: '#6aa84f'
                labelGroupId:
                  type: string
                  description: Id of label group to assign to the label
                  example: 397t0ccc8f74619096c738de15dc6512
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label'
  '/projects/{project-id}/labels/{label-id}':
    get:
      tags:
        - Label
      summary: Get label
      operationId: getLabel
      description: Get a single label.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/label-id'
        - $ref: '#/components/parameters/label-include'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label'
    patch:
      tags:
        - Label
      summary: Update label
      operationId: updateLabel
      description: Update a label.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/label-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the label
                  example: Label 1
                color:
                  type: string
                  description: Valid RGB hexadecimal color of the label
                  example: '#6aa84f'
                labelGroupId:
                  type: string
                  description: |
                    Id of label group to assign the label to, provide null as value to remove label from current group.
                  nullable: true
                deleted:
                  type: boolean
                  description: Soft deletion state of the label
                  example: false
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label'
    delete:
      tags:
        - Label
      summary: Delete label
      operationId: deleteLabel
      description: Delete a label.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/label-id'
      responses:
        '204':
          $ref: '#/components/responses/204'
  '/projects/{project-id}/labels/label-groups':
    get:
      tags:
        - Label Group
      summary: List label groups
      operationId: getLabelGroups
      description: List all the label groups.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - name: search
          in: query
          description: Filter by label group name
          schema:
            type: string
        - name: id
          in: query
          description: Filter by label group ids providing a comma separated list
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/label-group'
    post:
      tags:
        - Label Group
      summary: Create label group
      operationId: createLabelGroup
      description: Add a new label group.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The name of the label group
                  example: Group name
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label-group'
  '/projects/{project-id}/labels/label-groups/{label-group-id}':
    get:
      tags:
        - Label Group
      summary: Get label group
      operationId: getLabelGroup
      description: Get a single label group.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/label-group-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label-group'
    patch:
      tags:
        - Label Group
      summary: Update label group
      operationId: updateLabelGroup
      description: Update a label group.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/label-group-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the label group
                  example: Group name
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label-group'
    delete:
      tags:
        - Label Group
      summary: Delete label group
      operationId: deleteLabelGroup
      description: Delete a label group.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/label-group-id'
      responses:
        '204':
          $ref: '#/components/responses/204'
  '/projects/{project-id}/libraries':
    get:
      tags:
        - Library
      summary: List libraries
      operationId: getLibraries
      description: |
        List all libraries.

        Supported library types are **document**, **link**, **embedded_value** and **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-page'
        - $ref: '#/components/parameters/library-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/library'
    post:
      tags:
        - Library
      summary: Create library
      operationId: createLibrary
      description: |
        Add a new library.

        Supported library types are **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
              properties:
                name:
                  type: string
                  description: The name of the library
                  example: Library 1
                type:
                  type: string
                  description: |
                    The library type, valid values are:
                     - classification.
                  example: classification
                classification:
                  type: object
                  description: Fields specific to classification libraries
                  properties:
                    source:
                      type: string
                      description: Source (or publisher) for this classification
                    edition:
                      type: string
                      description: The edition or version of the classification system from which the classification notation is derived
                    editionDate:
                      type: string
                      description: 'The date on which the edition of the classification used became valid, the format should be yyyy-mm-dd'
                      example: '2016-09-23'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/library'
  '/projects/{project-id}/libraries/{library-id}':
    get:
      tags:
        - Library
      summary: Get library
      operationId: getLibrary
      description: |
        Get a single library.

        Supported library types are **document**, **link**, **embedded_value** and **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/library'
    patch:
      tags:
        - Library
      summary: Update library
      operationId: updateLibrary
      description: |
        Update a library.

        Supported library types are **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The name of the library
                  example: Library 1
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/library'
    delete:
      tags:
        - Library
      summary: Delete library
      operationId: deleteLibrary
      description: |
        Delete a library.

        Supported library types are **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/library'
  '/projects/{project-id}/libraries/{library-id}/items':
    get:
      tags:
        - Library
      summary: List library items
      operationId: getLibraryItems
      description: |
        List all library items.

        If the library supports revisions then the latest revision for each item will be returned.

        Supported library types are **document**, **link**, **embedded_value** and **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-parent-id'
        - $ref: '#/components/parameters/library-item-associations'
        - $ref: '#/components/parameters/library-item-labels'
        - $ref: '#/components/parameters/library-item-search'
        - $ref: '#/components/parameters/library-item-created-at-from'
        - $ref: '#/components/parameters/library-item-created-at-to'
        - $ref: '#/components/parameters/library-item-published-at-from'
        - $ref: '#/components/parameters/library-item-published-at-to'
        - $ref: '#/components/parameters/library-item-include'
        - $ref: '#/components/parameters/library-item-sub-folders'
        - $ref: '#/components/parameters/library-page'
        - $ref: '#/components/parameters/library-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/library-item-document'
                  - type: array
                    items:
                      $ref: '#/components/schemas/library-item-link'
                  - type: array
                    items:
                      $ref: '#/components/schemas/library-item-embedded_value'
                  - type: array
                    items:
                      $ref: '#/components/schemas/library-item-classification'
    post:
      tags:
        - Library
      summary: Create library item
      operationId: createLibraryItem
      description: |
        Add a new library item.

        Supported library types are **document**, **link** and **classification**.

        For file upload, only **document** library type is supported.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - in: header
          name: Bimsync-Params
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Name of the document
                example: Document Name
              parentId:
                type: string
                description: |
                  A unique identifier for the parent of the library item represented as compacted UUID using 32 hexadecimal characters.

                  If no parent is present, the parent is the root of the library.
                example: 924809076a694255b589d236517a55da
              document:
                type: object
                description: Fields specific for document library items.
                properties:
                  type:
                    type: string
                    description: Value must be **file**.
                    example: file
                  filename:
                    type: string
                    description: Name of the document revision.
                    example: Document Revision Name
              failOnDocumentExists:
                type: boolean
                description: |
                  Supported in libraries of type document.

                  Default value is **true** which means when a file with the same name already exists in the folder the response will be 25 CONFLICT and upload will fail. When set to false a new revision will be created.
                example: true
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/library-item-document-create'
                - $ref: '#/components/schemas/library-item-link-create'
                - $ref: '#/components/schemas/library-item-classification-create'
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/library-item-document'
                  - type: array
                    items:
                      $ref: '#/components/schemas/library-item-link'
                  - type: array
                    items:
                      $ref: '#/components/schemas/library-item-classification'
  '/projects/{project-id}/libraries/{library-id}/items/{library-item-id}':
    get:
      tags:
        - Library
      summary: Get library item
      operationId: getLibraryItem
      description: |
        Get a single library item.

        If the library supports revisions then the latest revision will be returned.

        By default returns the library item details as JSON.

        To download the library item use **Content-Type: application/octet-stream** in request headers.

        Supported library types are **document**, **link**, **embedded_value** and **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
        - $ref: '#/components/parameters/library-item-format'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/library-item-document'
                  - $ref: '#/components/schemas/library-item-link'
                  - $ref: '#/components/schemas/library-item-embedded_value'
                  - $ref: '#/components/schemas/library-item-classification'
            application/octet-stream:
              schema:
                type: string
                format: binary
    patch:
      tags:
        - Library
      summary: Update a library item
      operationId: updateLibraryItem
      description: |
        Update a library item.

        Supported library types are **document**, and **link**.

        In the case of document libraries updating **labels**, **name** or **parentId** at the same time is not supported.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the library item.
                  example: Name
                parentId:
                  type: string
                  description: |
                    A unique identifier for the parent of the library item represented as compacted UUID using 32 hexadecimal characters.

                    If no parent is present the item will keep its parent and not be modified.
                  example: 924809076a694255b589d236517a55da
                labelsToAdd:
                  type: array
                  description: List of labels to add to the library item.
                  items:
                    type: object
                    description: Id or name of the label to add
                    properties:
                      id:
                        type: string
                        description: Id of an existing label
                      name:
                        type: string
                        description: Name of an existing label otherwise a new label is created with this name
                labelsToRemove:
                  type: array
                  description: List of labels to add to the library item.
                  items:
                    type: object
                    description: Id or name of the label to add
                    properties:
                      id:
                        type: string
                        description: Id of an existing label
                      name:
                        type: string
                        description: Name of an existing label otherwise a new label is created with this name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/library-item-document'
                  - $ref: '#/components/schemas/library-item-link'
    delete:
      tags:
        - Library
      summary: Delete library item
      operationId: deleteLibraryItem
      description: |
        Delete a library item

        Supported library types are **document**, **link** and **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/library-item-document'
                  - $ref: '#/components/schemas/library-item-link'
                  - $ref: '#/components/schemas/library-item-classification'
  '/projects/{project-id}/libraries/{library-id}/items/{library-item-id}/token':
    post:
      tags:
        - Library
      summary: Create library item download token
      operationId: getLibraryItemToken
      description: |
        Create a signed download URL token to allow access to the latest revision of a document without requiring additional authentication.

        The token will expire in one hour.

        Supported library types are **document**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
        - $ref: '#/components/parameters/library-item-format'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/library-item-document-token'
  '/projects/{project-id}/libraries/{library-id}/items/{library-item-id}/revisions':
    get:
      tags:
        - Library
      summary: List library item revisions
      operationId: getLibraryItemRevisions
      description: |
        List all revisions for a library item.

        Supported library types are **document**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
        - $ref: '#/components/parameters/library-page'
        - $ref: '#/components/parameters/library-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/library-item-document-file-revision'
    post:
      tags:
        - Library
      summary: Create library item revision
      operationId: createLibraryItemRevision
      description: |
        Create a new library item revision.

        Attach the file and set `Content-Type` header to `application/octet-stream`.

        Supported library types are **document**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
        - in: header
          name: Bimsync-Params
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: Name of the document revision
                example: Document Revision Name
          required: true
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/library-item-document-file-revision'
  '/projects/{project-id}/libraries/{library-id}/items/{library-item-id}/revisions/{library-item-revision-id}':
    get:
      tags:
        - Library
      summary: Get library item revision
      operationId: getLibraryItemRevision
      description: |
        Get a library item revision.

        By default returns the library item details as JSON.

        To download the library item use **Content-Type: application/octet-stream** in request headers.

        Supported library types are **document**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
        - $ref: '#/components/parameters/library-item-revision-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/library-item-document-file-revision'
            application/octet-stream:
              schema:
                type: string
                format: binary
  '/projects/{project-id}/libraries/{library-id}/items/{library-item-id}/revisions/{library-item-revision-id}/token':
    post:
      tags:
        - Library
      summary: Create library item revision download token
      operationId: getLibraryItemRevisionToken
      description: |
        Create a signed download URL token to allow access to the document revision without requiring additional authentication.

        The token will expire in one hour.

        Supported library types are **document**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
        - $ref: '#/components/parameters/library-item-revision-id'
        - $ref: '#/components/parameters/library-item-format'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/library-item-document-token'
  '/projects/{project-id}/libraries/{library-id}/items/{library-item-id}/associations':
    get:
      tags:
        - Library
      summary: List library item associations
      operationId: getLibraryItemAssociations
      description: |
        List all associations between a library item and IFC products.

        IFC products are represented by their IfcGloballyUniqueId.

        Supported library types are **document**, **link**, **embedded_value** and **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
        - $ref: '#/components/parameters/library-page'
        - $ref: '#/components/parameters/library-page-size'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/library-item-association'
    post:
      tags:
        - Library
      summary: Add library item associations
      operationId: addLibraryItemAssociations
      description: |
        Associate a library item to IFC products.

        IFC products are represented by their IfcGloballyUniqueId.

        Supported library types are **document**, **link** and **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
        - in: query
          name: revision
          description: |
            Specify which revisions are used to resolve global id from objectId by providing a comma separated list. If not present, the latest revisions in all models in the project are used.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                description: Supported fields are globalId or objectId
                properties:
                  globalId:
                    type: string
                    description: A 22 character IfcGloballyUniqueId.
                    example: 2_TmT90tD0x9tJSTsyTb1J
                  objectId:
                    type: string
                    description: The object id of a product.
                    example: 192042324556
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/library-item-association'
    delete:
      tags:
        - Library
      summary: Remove library item associations
      operationId: removeLibraryItemAssociations
      description: |
        Remove associations between a library item and IFC products.

        Supported library types are **document**, **link** and **classification**.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/library-id'
        - $ref: '#/components/parameters/library-item-id'
        - in: query
          name: revision
          description: |
            Specify which revisions are used to resolve global id from objectId by providing a comma separated list. If not present, the latest revisions in all models in the project are used.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                description: Supported fields are globalId or objectId
                properties:
                  globalId:
                    type: string
                    description: A 22 character IfcGloballyUniqueId.
                    example: 2_TmT90tD0x9tJSTsyTb1J
                  objectId:
                    type: string
                    description: The object id of a product.
                    example: 192042324556
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/library-item-association'
  '/projects/{project-id}/members':
    get:
      tags:
        - Member
      summary: List members
      operationId: getMembers
      description: List all the project members.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - name: userType
          in: query
          description: |
            Filter by user type, valid values are `user`, `team` or `organization`
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/member'
    post:
      tags:
        - Member
      summary: Create member
      operationId: createMember
      description: |
        Add a new project member.

        The current user must be an administrator of the project.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user
                - role
              properties:
                user:
                  type: string
                  description: The user id for the new member
                  example: 973763399e2147dceg4a4a0661e03a26
                role:
                  type: string
                  description: |
                    Role of the member, valid values are:
                      - administrator
                      - member
                  example: member
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
  '/projects/{project-id}/members/{user-id}':
    get:
      tags:
        - Member
      summary: Get member
      operationId: getMember
      description: Get a single member.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/user-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
    put:
      tags:
        - Member
      summary: Update member
      operationId: updateMember
      description: |
        Update project membership of a member.

        The current user must be a project administrator.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/user-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: |
                    Role of the member, valid values are:
                      - administrator
                      - member
                  example: member
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
    delete:
      tags:
        - Member
      summary: Remove member
      operationId: deleteMember
      description: |
        Remove a project member.

        The current user must be a project administrator.

        The project owner cannot be removed from the project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/user-id'
      responses:
        '204':
          $ref: '#/components/responses/204'
  '/projects/{project-id}/models':
    get:
      tags:
        - Model
      summary: List models
      operationId: getModels
      description: List all the models in a project.
      parameters:
        - $ref: '#/components/parameters/project-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/model'
    post:
      tags:
        - Model
      summary: Create model
      operationId: createModel
      description: Add a new model.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: 'The name of the model, limited to 512 characters'
                  example: Model 1
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
  '/projects/{project-id}/models/{model-id}':
    get:
      tags:
        - Model
      summary: Get model
      operationId: getModel
      description: |
        Download the latest revision of a model as an IFC file setting the `Accept` header to be `application/ifc`
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/model-id'
        - $ref: '#/components/parameters/model-normalize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
            application/ifc:
              schema:
                type: string
                format: ifc
    put:
      tags:
        - Model
      summary: Update model
      operationId: updateModel
      description: |
        Update a model.

        The current user must be an administrator of the project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/model-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the model, limited to 512 characters'
                  example: Model 1
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model'
    delete:
      tags:
        - Model
      summary: Delete model
      operationId: deleteModel
      description: |
        Delete a model.

        The current user must be an administrator of the project.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/model-id'
      responses:
        '204':
          $ref: '#/components/responses/204'
  '/projects/{project-id}/revisions':
    get:
      tags:
        - Model Revision
      summary: List revisions
      operationId: getRevisions
      description: List all the model revisions.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/model-revision-model'
        - $ref: '#/components/parameters/model-revision-product'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/model-revision'
    post:
      tags:
        - Model Revision
      summary: Create revision
      operationId: createRevision
      description: |
        Upload a new model revision.

        Include the IFC file in the request and set the `Content-Type` header to be `application/ifc`.

        **Note:** The code examples for this method may have incorrect headers.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - in: header
          name: Bimsync-Params
          schema:
            type: object
            required:
              - comment
              - filename
              - model
            properties:
              callbackUri:
                type: string
                description: |
                  Pass a URI to be notified when the revision is processed.

                  Catenda will issue an HTTP GET request with the query parameter token set to revision status id and result set to either **success** or **error**.
                example: 'https://example.com'
              comment:
                type: string
                description: 'Text describing the revision, limited to 64K characters'
                example: Revision description
              filename:
                type: string
                description: |
                  The original name of the IFC file.

                  The name is used in format detection and should have the extension .ifc, .ifcZIP or .ifcXML.
                example: ARCH.ifc
              model:
                type: string
                description: Id of the model the revision should be added to.
                example: 37024671cbd642a9b7d84808b4d509f5
          required: true
      requestBody:
        content:
          application/ifc:
            schema:
              type: string
              format: binary
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model-revision-status'
  '/projects/{project-id}/revisions/{model-revision-id}':
    get:
      tags:
        - Model Revision
      summary: Get revision
      operationId: getRevision
      description: |
        Get a revision of an IFC model.

        By default returns the revision details as JSON.

        To download the revision use **Content-Type: application/ifc** in request headers.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/model-revision-id'
        - $ref: '#/components/parameters/model-normalize'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/model-revision'
            application/ifc:
              schema:
                type: string
                format: ifc
  '/projects/{project-id}/revision_status/{model-revision-status-id}':
    get:
      tags:
        - Model Revision
      summary: Get revision status
      operationId: getRevisionStatus
      description: Get the processing status for a revision.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/model-revision-status-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/model-revision-status'
  /projects:
    get:
      tags:
        - Project
      summary: List projects
      operationId: getProjects
      description: List all projects the current user is a member of.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project'
    post:
      tags:
        - Project
      summary: Create project
      operationId: createProject
      description: |
        Add a new project.

        The project will be owned by the current user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                - name
              properties:
                description:
                  type: string
                  description: 'A short text describing the project, limited to 1024 characters'
                  example: Project description
                name:
                  type: string
                  description: 'The name of the project, limited to 512 characters'
                  example: Project name
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
  '/projects/{project-id}':
    get:
      tags:
        - Project
      summary: Get project
      operationId: getProject
      description: Get a single project.
      parameters:
        - $ref: '#/components/parameters/project-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
    put:
      tags:
        - Project
      summary: Update project
      operationId: updateProject
      description: |
        Update a project.

        The current user must be an administrator of the project.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  description: 'A short text describing the project, limited to 1024 characters'
                  example: Project description
                name:
                  type: string
                  description: 'The name of the project, limited to 512 characters'
                  example: Project name
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
    delete:
      tags:
        - Project
      summary: Delete project
      operationId: deleteProject
      description: |
        Delete a project.

        The current user must be the owner of the project.

        If the project is owned by an organization, the user must be an owner of the organization.
      parameters:
        - $ref: '#/components/parameters/project-id'
      responses:
        '204':
          $ref: '#/components/responses/204'
  /orgs:
    get:
      tags:
        - Organization
      summary: List organizations
      operationId: getOrganizations
      description: List all organizations the current user is a member of.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
  '/orgs/{organization-id}':
    get:
      tags:
        - Organization
      summary: Get organization
      operationId: getOrganization
      description: |
        Get a single organization.

        The current user must be a member of the organization.
      parameters:
        - $ref: '#/components/parameters/organization-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    put:
      tags:
        - Organization
      summary: Update organization
      operationId: updateOrganization
      description: |
        Update an organization.

        The current user must be an owner of the organization.
      parameters:
        - $ref: '#/components/parameters/organization-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the organization, limited to 128 characters'
                  example: Organization name
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
  '/orgs/{organization-id}/members':
    get:
      tags:
        - Organization
      summary: List members
      operationId: getOrganizationMembers
      description: |
        List all organization members.

        The current user must be a member of the organization.
      parameters:
        - $ref: '#/components/parameters/organization-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/member'
    post:
      tags:
        - Organization
      summary: Add member
      operationId: addOrganizationMember
      description: |
        Add an organization member.

        The current user must be an owner of the organization.
      parameters:
        - $ref: '#/components/parameters/organization-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user
                - role
              properties:
                user:
                  type: string
                  description: Id of the user
                  example: 697t0czc8f74614096c758dr15dc6512
                role:
                  type: string
                  description: |
                    Role of the member, valid values are:
                      - owner
                      - member
                  example: member
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
  '/orgs/{organization-id}/members/{user-id}':
    get:
      tags:
        - Organization
      summary: Get member
      operationId: getOrganizationMember
      description: |
        Get a single organization member.

        The current user must be a member of the organization.
      parameters:
        - $ref: '#/components/parameters/organization-id'
        - $ref: '#/components/parameters/user-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
    put:
      tags:
        - Organization
      summary: Update member
      operationId: updateOrganizationMember
      description: |
        Update an organization membership.

        The current user must be an owner of the organization.
      parameters:
        - $ref: '#/components/parameters/organization-id'
        - $ref: '#/components/parameters/user-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: |
                    The role of the member, valid values are:
                      - owner
                      - member
                  example: Organization name
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
    delete:
      tags:
        - Organization
      summary: Remove member
      operationId: removeOrganizationMember
      description: |
        Remove an organization member.

        The current user must be an owner of the organization to remove other members.

        There must be at least one other owner in the organization when removing the current user.
      parameters:
        - $ref: '#/components/parameters/organization-id'
        - $ref: '#/components/parameters/user-id'
      responses:
        '204':
          $ref: '#/components/responses/204'
  '/orgs/{organization-id}/projects':
    post:
      tags:
        - Organization
      summary: Create project
      operationId: createOrganizationProject
      description: |
        Add a new project. 

        The current user must be an owner of the organization. 

        The project will be owned by the organization and count towards the owners project limit.
      parameters:
        - $ref: '#/components/parameters/organization-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                - name
              properties:
                description:
                  type: string
                  description: 'A short text describing the project, limited to 1024 characters'
                  example: Project description
                name:
                  type: string
                  description: 'The name of the project, limited to 512 characters'
                  example: Project name
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
  /scim/v2/ServiceProviderConfig:
    get:
      tags:
        - SCIM
      summary: Get service provider config
      operationId: getServiceProviderConfig
      description: Returns all the SCIM specification features that are available.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /scim/v2/Schemas:
    get:
      tags:
        - SCIM
      summary: Get schemas
      operationId: getSchemas
      description: Returns all the supported schemas.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  '/scim/v2/Schemas/{schema-uri}':
    get:
      tags:
        - SCIM
      summary: Get schema
      operationId: getSchema
      description: Returns a single schema.
      parameters:
        - $ref: '#/components/parameters/schema-uri'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /scim/v2/ResourceTypes:
    get:
      tags:
        - SCIM
      summary: Get resource types
      operationId: getResourceTypes
      description: Returns all the available resource types.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
  /scim/v2/Users:
    get:
      tags:
        - SCIM
      summary: List SCIM users
      operationId: listScimUsers
      description: |
        List all SCIM users.

        Current user must be of organization type.
      parameters:
        - $ref: '#/components/parameters/scim-count'
        - $ref: '#/components/parameters/scim-start-index'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalResults:
                    type: integer
                    description: Total number of users in result
                    example: 1
                  itemsPerPage:
                    type: integer
                    description: Page size
                    example: 10
                  startIndex:
                    type: integer
                    description: Page number
                    example: 1
                  schemas:
                    type: array
                    description: List of schemas
                    items:
                      type: string
                      description: The schema value
                      example: 'urn:ietf:params:scim:api:messages:2.0:ListResponse'
                  Resources:
                    type: array
                    description: List of users
                    items:
                      $ref: '#/components/schemas/scim-user'
    post:
      tags:
        - SCIM
      summary: Create SCIM user
      operationId: createScimUser
      description: |
        Add a new SCIM user.

        Current user must be of organization type.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - active
                - emails
                - externalId
                - name
                - schemas
                - userName
              properties:
                active:
                  type: boolean
                  description: Active state of the user
                  example: true
                emails:
                  type: array
                  description: List of emails for the user
                  items:
                    type: object
                    properties:
                      value:
                        type: string
                        description: Value of the email address
                        example: user_name@example.com
                      primary:
                        type: boolean
                        description: Whether is the primary email address for the user
                        example: true
                      type:
                        type: string
                        description: Category of the email
                        example: work
                externalId:
                  type: string
                  description: Identifier of the original source where the user data is taken from
                  example: user name
                name:
                  type: object
                  description: Name object for the user
                  properties:
                    formatted:
                      type: string
                      description: Formatted representation of the user name
                      example: user name
                    familyName:
                      type: string
                      description: The family name of the user
                      example: name
                    givenName:
                      type: string
                      description: The given name of the user
                      example: user
                schemas:
                  type: array
                  description: List of schemas
                  items:
                    type: string
                    description: The schema value
                    example: 'urn:ietf:params:scim:schemas:core:2.0:User'
                userName:
                  type: string
                  description: Human readable user name
                  example: user_name@example.com
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scim-user'
  '/scim/v2/Users/{user-id}':
    get:
      tags:
        - SCIM
      summary: Get SCIM user
      operationId: getScimUser
      description: |
        Get a single SCIM user.

        Current user must be of organization type.
      parameters:
        - $ref: '#/components/parameters/user-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scim-user'
    put:
      tags:
        - SCIM
      summary: Update SCIM user
      operationId: updateScimUser
      description: |
        Update a SCIM user.

        Current user must be of organization type.
      parameters:
        - $ref: '#/components/parameters/user-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - emails
                - externalId
                - name
                - schemas
                - userName
              properties:
                active:
                  type: string
                  description: Active state of the user
                  example: true
                emails:
                  type: array
                  description: List of emails for the user
                  items:
                    type: object
                    properties:
                      value:
                        type: string
                        description: Value of the email address
                        example: john_smith@example.com
                      primary:
                        type: boolean
                        description: Whether is the primary email address for the user
                        example: true
                      type:
                        type: string
                        description: Category of the email
                        example: work
                externalId:
                  type: string
                  description: Identifier of the original source where the user data is taken from
                  example: user name
                name:
                  type: object
                  description: Name object for the user
                  properties:
                    formatted:
                      type: string
                      description: Formatted representation of the user name
                      example: user name
                    familyName:
                      type: string
                      description: The family name of the user
                      example: Smith
                    givenName:
                      type: string
                      description: The given name of the user
                      example: John
                schemas:
                  type: array
                  description: List of schemas
                  items:
                    type: string
                    description: The schema value
                    example: 'urn:ietf:params:scim:schemas:core:2.0:User'
                userName:
                  type: string
                  description: Human readable user name
                  example: john_smith@example.com
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scim-user'
    delete:
      tags:
        - SCIM
      summary: Delete SCIM user
      operationId: deleteScimUser
      description: |
        Delete a SCIM user.

        Current user must be of organization type.
      parameters:
        - $ref: '#/components/parameters/user-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scim-user'
  '/projects/{project-id}/teams':
    post:
      tags:
        - Team
      summary: Create team
      operationId: createTeam
      description: |
        Add a new project team.

        The current user must be an administrator of the project.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - role
              properties:
                name:
                  type: string
                  description: The name of the team
                  example: Team name
                role:
                  type: string
                  description: |
                    Role of the team, valid values are:
                      - administrator
                      - member
                  example: member
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
  '/projects/{project-id}/teams/{team-id}':
    get:
      tags:
        - Team
      summary: Get team
      operationId: getTeam
      description: Get a single team.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/team-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
    patch:
      tags:
        - Team
      summary: Update team
      operationId: updateTeam
      description: |
        Update project membership for the team.

        The current user must be a project administrator.

        The members of the team will receive any updated roles.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/team-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The name of the team
                  example: Team name
                role:
                  type: string
                  description: |
                    Role of the team, valid values are:
                      - administrator
                      - member
                  example: member
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
    delete:
      tags:
        - Team
      summary: Remove team
      operationId: deleteTeam
      description: |
        Remove a project team.

        The current user must be a project administrator.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/team-id'
      responses:
        '204':
          $ref: '#/components/responses/204'
  '/projects/{project-id}/teams/{team-id}/members':
    get:
      tags:
        - Team
      summary: List members
      operationId: getTeamMembers
      description: List all the members of a team.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/team-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/member'
    post:
      tags:
        - Team
      summary: Add member
      operationId: createTeamMember
      description: Add a new team member.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/team-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user
              properties:
                user:
                  type: string
                  description: Id of the user to be added to the team
                  example: e1e20bcced654fc9462e3206325d649e
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/member'
  '/projects/{project-id}/teams/{team-id}/members/{user-id}':
    delete:
      tags:
        - Team
      summary: Remove member
      operationId: deleteTeamMember
      description: |
        Removes a user from the team.

        The current user must be a project administrator.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/team-id'
        - $ref: '#/components/parameters/user-id'
      responses:
        '204':
          $ref: '#/components/responses/204'
  '/projects/{project-id}/issues/boards/{board-id}':
    get:
      tags:
        - Topic Board
      summary: Get topic board
      operationId: getTopicBoard
      description: Get a single topic board.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/topic-board-id'
        - $ref: '#/components/parameters/topic-board-include'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic-board'
    patch:
      tags:
        - Topic Board
      summary: Update a topic board
      operationId: updateTopicBoard
      description: |
        Update a topic board.

        Only custom fields and custom field instances are supported.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/topic-board-id'
        - $ref: '#/components/parameters/topic-board-include'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customFieldsToAdd:
                  type: array
                  description: Custom fields to create.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'A unique identifier for the custom field, represented as compacted UUID using 32 hexadecimal characters.'
                        example: 324809076a694255b589d236517a55da
                      required:
                        type: boolean
                        description: Whether the value of the instance is non nullable.
                        example: false
                      defaultValue:
                        type: object
                        description: 'Default value for the custom field instance, required if instance is non nullable.'
                      disabled:
                        type: boolean
                        description: Whether the custom field instance is disabled.
                        example: false
                customFieldsToModify:
                  type: array
                  description: Custom fields to update.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'A unique identifier for the custom field, represented as compacted UUID using 32 hexadecimal characters.'
                        example: 324809076a694255b589d236517a55da
                      required:
                        type: boolean
                        description: Whether the value of the instance is non nullable.
                        example: false
                      defaultValue:
                        type: object
                        description: 'Default value for the custom field instance, required if instance is non nullable.'
                      disabled:
                        type: boolean
                        description: Whether the custom field instance is disabled.
                        example: false
                customFieldsToDisable:
                  type: array
                  description: Custom fields to disable.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'Id of the custom field instance, represented as compacted UUID using 32 hexadecimal characters.'
                        example: 324809076a694255b589d236517a55da
                customFieldstoRestore:
                  type: array
                  description: Custom fields to restore.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'Id of the custom field instance, represented as compacted UUID using 32 hexadecimal characters.'
                        example: 324809076a694255b589d236517a55da
                customFieldsToDelete:
                  type: array
                  description: Custom fields to delete.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'Id of the custom field instance, represented as compacted UUID using 32 hexadecimal characters.'
                        example: 324809076a694255b589d236517a55da
                customFieldsToMove:
                  type: array
                  description: Custom fields to move.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: 'Id of the custom field instance, represented as compacted UUID using 32 hexadecimal characters.'
                        example: 324809076a694255b589d236517a55da
                      itemBeforeId:
                        type: string
                        description: Id of the custom field instance that appears before the current one. Use null if the item should be the first one.
                        nullable: true
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic-board'
  /user:
    get:
      tags:
        - User
      summary: Get current user
      operationId: getCurrentUser
      description: Get the current user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
    put:
      tags:
        - User
      summary: Update current user
      operationId: updateCurrentUser
      description: Update the current user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the user, limited to 128 characters.'
                  example: User name
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
  /user/starred_projects:
    get:
      tags:
        - User
      summary: List starred projects
      operationId: getStarredProjects
      description: List all starred projects for the current user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project'
  '/projects/{project-id}/viewer2d/token':
    post:
      tags:
        - Viewer
      summary: Create 2D viewer token
      operationId: createViewer2dToken
      description: Get a 2D Viewer token to access viewer data.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                models:
                  type: string
                  description: Limit by model ids providing a comma separated list
                  example: 5f61fc16dac34d4e8d450b35bce62cf4
                revisions:
                  type: string
                  description: Limit by revision ids providing a comma separated list
                  example: 28376aec8d04342dac4bf89cc9735ar4
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/viewer-2d-token'
  '/projects/{project-id}/viewer3d/token':
    post:
      tags:
        - Viewer
      summary: Create 3D viewer token
      operationId: createViewer3dToken
      description: Get a 3D viewer token to access viewer data.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                models:
                  type: string
                  description: Limit by model ids providing a comma separated list
                  example: 5f61fc16dac34d4e8d450b35bce62cf4
                revisions:
                  type: string
                  description: Limit by revision ids providing a comma separated list
                  example: 28376aec8d04342dac4bf89cc9735ar4
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/viewer-3d-token'
  '/projects/{project-id}/webhooks/user':
    get:
      tags:
        - Webhook
      summary: List webhooks
      operationId: getWebhooks
      description: List all webhook subscriptions.
      parameters:
        - $ref: '#/components/parameters/project-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/webhook-subscription'
    post:
      tags:
        - Webhook
      summary: Create webhook
      operationId: createWebhook
      description: Add a new webhook subscription.
      parameters:
        - $ref: '#/components/parameters/project-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - event
                - target_url
              properties:
                event:
                  type: string
                  description: |
                    The event that triggers the callback URL.

                    Valid values are: 
                      - issue.created
                      - issue.deleted
                      - issue.modified
                      - issue.status.changed
                      - library.document.revision.published
                      - model.created
                      - revision.created
                  example: issue.created
                target_url:
                  type: string
                  description: The URL to be called when the event occurs
                  example: 'https://hooks.zapier.com/hooks/catch/1028857/a8w0or/'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-subscription'
  '/projects/{project-id}/webhooks/user/{webhook-id}':
    get:
      tags:
        - Webhook
      summary: Get webhook
      operationId: getWebhook
      description: Get a single webhook subscription.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/webhook-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-subscription'
    put:
      tags:
        - Webhook
      summary: Update webhook
      operationId: updateWebhook
      description: Update a webhook subscription.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/webhook-id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  description: |
                    The event that triggers the callback URL.

                    Valid values are: 
                      - issue.created
                      - issue.deleted
                      - issue.modified
                      - issue.status.changed
                      - library.document.revision.published
                      - model.created
                      - revision.created
                  example: issue.created
                state:
                  type: string
                  description: |
                    The state of the Webhook.

                    Valid values are:
                      - ENABLED
                      - DISABLED_BY_USER
                target_url:
                  type: string
                  description: The URL to be called when the event occurs
                  example: 'https://hooks.zapier.com/hooks/catch/1028857/a8w0or/'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/label'
    delete:
      tags:
        - Webhook
      summary: Delete webhook
      operationId: deleteWebhook
      description: Delete a webhook subscription.
      parameters:
        - $ref: '#/components/parameters/project-id'
        - $ref: '#/components/parameters/webhook-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhook-subscription'
components:
  parameters:
    classification-id:
      name: object-id
      in: path
      required: true
      description: Object id of the classification
      schema:
        type: integer
        format: int64
    classification-reference-id:
      name: object-id
      in: path
      required: true
      description: Object id of the classification reference
      schema:
        type: integer
        format: int64
    collection-id:
      name: collection-id
      in: path
      required: true
      description: Id of the document library item collection
      schema:
        type: string
    custom-field-id:
      name: custom-field-id
      in: path
      required: true
      description: Id of the custom field
      schema:
        type: string
    group-id:
      name: object-id
      in: path
      required: true
      description: Object id of the group
      schema:
        type: integer
        format: int64
    label-group-id:
      name: label-group-id
      in: path
      required: true
      description: Id of the label group
      schema:
        type: string
    label-id:
      name: label-id
      in: path
      required: true
      description: Id of the label
      schema:
        type: string
    layer-id:
      name: object-id
      in: path
      required: true
      description: Object id of the layer
      schema:
        type: integer
        format: int64
    library-id:
      name: library-id
      in: path
      required: true
      description: Id of the library
      schema:
        type: string
    library-item-id:
      name: library-item-id
      in: path
      required: true
      description: Id of the library item
      schema:
        type: string
    library-item-revision-id:
      name: library-item-revision-id
      in: path
      required: true
      description: Id of the library item revision
      schema:
        type: string
    model-id:
      name: model-id
      in: path
      required: true
      description: Id of the model
      schema:
        type: string
    model-revision-id:
      name: model-revision-id
      in: path
      required: true
      description: Id of the model revision
      schema:
        type: string
    model-revision-status-id:
      name: model-revision-status-id
      in: path
      required: true
      description: Id of the model revision status
      schema:
        type: string
    organization-id:
      name: organization-id
      in: path
      required: true
      description: Id of the organization
      schema:
        type: string
    owner-history-id:
      name: object-id
      in: path
      required: true
      description: Object id of the owner history
      schema:
        type: integer
        format: int64
    product-id:
      name: object-id
      in: path
      required: true
      description: Object id of the product
      schema:
        type: integer
        format: int64
    project-id:
      name: project-id
      in: path
      required: true
      description: Id of the project
      schema:
        type: string
    schema-uri:
      name: schema-uri
      in: path
      required: true
      description: Schema uri
      schema:
        type: string
        example: 'urn:ietf:params:scim:schemas:core:2.0:User'
    team-id:
      name: team-id
      in: path
      required: true
      description: Id of the team
      schema:
        type: string
    topic-board-id:
      name: board-id
      in: path
      required: true
      description: Id of the topic board
      schema:
        type: string
    type-id:
      name: object-id
      in: path
      required: true
      description: Object id of the type
      schema:
        type: integer
        format: int64
    user-id:
      name: user-id
      in: path
      required: true
      description: Id of the user
      schema:
        type: string
    webhook-id:
      name: webhook-id
      in: path
      required: true
      description: Id of the webhook
      schema:
        type: string
    collection-created-by:
      name: createdBy
      in: query
      description: Limit result to only contain collections created by the specified users. Provide a comma separated list of user ids.
      schema:
        type: string
    collection-fields:
      name: fields
      in: query
      description: Specify which fields to include in the response. Provide a comma separated list of valid values. Valid values are **id**.
      schema:
        type: string
    collection-files:
      name: files
      in: query
      description: Limit result to only contain collections containing the specified library item revisions. Provide a comma separated list of library item revision ids.
      schema:
        type: string
    collection-finalized:
      name: finalized
      in: query
      description: Limit result to only contain finalized collections.
      schema:
        type: boolean
    collection-follow-latest-revision:
      name: followLatestRevision
      in: query
      description: Limit result to only contain collections that follow the latest revision of all items.
      schema:
        type: boolean
    collection-followers:
      name: followers
      in: query
      description: Limit result to only contain collections followed by the specified users. Provide a comma separated list of user ids.
      schema:
        type: string
    collection-include:
      name: include
      in: query
      description: Specify which additional fields to include in the response. Provide a comma separated list of valid values. Valid values are **libraryItem**.
      schema:
        type: string
    collection-library-item-include:
      name: libraryItemInclude
      in: query
      description: Specify which additional library item fields to include in the response. Combine with include parameter and provide a comma separated list of valid values. Valid values are **path**.
      schema:
        type: string
    collection-library-items:
      name: libraryItems
      in: query
      description: Limit result to only contain collections containing the specified library items. Provide a comma separated list of library item ids.
      schema:
        type: string
    collection-search:
      name: search
      in: query
      description: Limit result to only contain collections with names that match the search term.
      schema:
        type: string
    collection-shared-by:
      name: sharedBy
      in: query
      description: 'Limit result to only contain collections with the specified shared methods. Provide a comma separated list of valid values. Valid values are **link**, **email** or **not-shared**.'
      schema:
        type: string
    collection-visibility:
      name: visibility
      in: query
      description: Limit result to only contain collections with the specified visibility. Provide a comma separated list of valid values. Valid values are **private** or **project-members**.
      schema:
        type: string
    ifc-model:
      name: model
      in: query
      description: Filter by latest revisions of model ids
      schema:
        type: array
        items:
          type: string
    ifc-page:
      name: page
      in: query
      description: Default value is 1
      schema:
        type: integer
    ifc-page-size:
      name: pageSize
      in: query
      description: 'Default 100, max 1000'
      schema:
        type: integer
    ifc-revision:
      name: revision
      in: query
      description: Filter by revision ids
      schema:
        type: array
        items:
          type: string
    ifc-type:
      name: ifcType
      in: query
      description: Filter by IFC type
      schema:
        type: string
    label-include:
      name: include
      in: query
      description: |
        Use value `group` to include associated label group in the result
      schema:
        type: string
    library-item-associations:
      name: associations
      in: query
      description: Limit result to only contain library items linked to the specified IFC guids. Provide a comma separated list of IFC guids.
      schema:
        type: string
    library-item-created-at-from:
      name: createdAtFrom
      in: query
      description: |
        Filter the result by providing a date in ISO 8601 format.

        Result will only contain items created after this date.
      schema:
        type: string
    library-item-created-at-to:
      name: createdAtTo
      in: query
      description: |
        Filter the result by providing a date in ISO 8601 format.

        Result will only contain items created before this date.
      schema:
        type: string
    library-item-format:
      name: format
      in: query
      description: Optionally specify an alternative format when download a library item.
      schema:
        type: string
    library-item-include:
      name: include
      in: query
      description: |
        Comma separated list of referenced properties that will be added to the items of the result. Valid values are **labels**, **labelGroups** and **path**.
      schema:
        type: string
    library-item-labels:
      name: labels
      in: query
      description: Filter the result by providing a comma separated list of label ids.
      schema:
        type: string
    library-item-parent-id:
      name: parentId
      in: query
      description: |
        Parent item of the library items, represented as compacted UUID using 32 hexadecimal characters. Setting this will only list the items with this parentId, to specify the root items, set parentId to **root**.
      schema:
        type: string
    library-item-published-at-from:
      name: publishedAtFrom
      in: query
      description: |
        Filter the result by providing a date in ISO 8601 format.

        Result will only contain items with the last revision being published after this date.
      schema:
        type: string
    library-item-published-at-to:
      name: publishedAtTo
      in: query
      description: |
        Filter the result by providing a date in ISO 8601 format.

        Result will only contain items with the last revision being published before this date.
      schema:
        type: string
    library-item-search:
      name: search
      in: query
      description: Filter the result by search text.
      schema:
        type: string
    library-item-sub-folders:
      name: subFolders
      in: query
      description: 'Include library items within folders in result, recursive search.'
      schema:
        type: boolean
    library-page:
      name: page
      in: query
      description: Default value is 1
      schema:
        type: integer
    library-page-size:
      name: pageSize
      in: query
      description: 'Default 100, max 1000'
      schema:
        type: integer
    model-normalize:
      name: normalize
      in: query
      description: |
        Applies to IFC downloads. By default, STEP instance names correspond to their Catenda object id, by setting `true` the STEP instance names will instead start at #1.
      schema:
        type: string
    model-revision-model:
      name: model
      in: query
      description: Filter by model id
      schema:
        type: string
    model-revision-product:
      name: product
      in: query
      description: Filter by the object id of an IFC product
      schema:
        type: string
    scim-count:
      name: count
      in: query
      description: 'Page size, default value is 100'
      schema:
        type: integer
    scim-start-index:
      name: startIndex
      in: query
      description: 'Page number, default value is 1'
      schema:
        type: integer
    topic-board-include:
      name: include
      in: query
      description: Comma separated list of referenced properties that will be added to the result. Valid values are **customFields**.
      schema:
        type: string
  responses:
    '204':
      description: No Content
  schemas:
    collection:
      type: object
      properties:
        id:
          type: string
          description: 'Id of the collection, represented as compacted UUID using 32 hexadecimal characters.'
          example: 924809076a694255b589d236517a55da
        name:
          type: string
          description: The name of the collection.
          example: Collection name
        description:
          type: string
          description: The description of the collection.
          example: Collection description
        finalized:
          type: boolean
          description: |
            Indicates whether the collection is finalized.

            Finalized collections can no longer be edited.
          example: false
        followLatestRevision:
          type: boolean
          description: Determines whether collection items follow the latest revision of a library item or the revision when added to the collection.
          example: true
        visibility:
          type: string
          description: |
            Determines whether the collection is available to all project members.

            By default a collection becomes available to project members when it is finalized.

            Valid values are:
              - private
              - project-members
        createdAt:
          type: string
          description: The date and time the collection was created in ISO 8601 format.
          example: 2023-12-09T10:07:56.000Z
        createdBy:
          type: string
          description: The user id of the user who created the collection.
          example: 524809076a694255b989d236517a55da
    collection-item:
      type: object
      properties:
        id:
          type: string
          description: 'Id of the collection item, represented as compacted UUID using 32 hexadecimal characters.'
          example: 924809076a694255b589d236517a55da
        libraryId:
          type: string
          description: The library id of the library item.
          example: ead9b194e6024e6b92cae1d791797b68
        libraryItemId:
          type: string
          description: Id of the library item.
          example: 5badf33213ae420ebf81e727d5281850
        fileId:
          type: string
          description: Id of the library item revision.
          example: 5dc75452-29a4-4c4a-8415-991b92a92001
        createdAt:
          type: string
          description: The date and time the collection was created in ISO 8601 format.
          example: 2023-12-09T10:07:56.000Z
        createdBy:
          type: string
          description: The user id of the user who created the collection.
          example: 524809076a694255b989d236517a55da
    custom-field:
      type: object
      description: Represents a single custom field.
      properties:
        id:
          type: string
          description: 'Id of the custom field, represented as compacted UUID using 32 hexadecimal characters.'
          example: 324409076a694255b589d236517a55da
        name:
          type: string
          description: The name of the custom field.
          example: Custom field name
        description:
          type: string
          description: Description of the custom field.
          example: Custom field description
        type:
          type: string
          description: 'Type of the custom field. Valid values are **text**, **integer**, **double**, or **enumeration**.'
          example: text
        createdAt:
          type: string
          description: The date and time the custom field was created in ISO 8601 format.
          example: 2023-03-06T11:52:45.000Z
        createdBy:
          type: string
          description: Id of the user that created the custom field.
          example: 624809076a694255b989d236517a55da
        archived:
          type: boolean
          description: Whether the custom field is archived.
          example: false
        dropdownItems:
          type: array
          description: List of dropdown items for custom fields of type enumeration. Value is null for other custom field types.
          items:
            type: object
            properties:
              id:
                type: string
                description: 'Id of the custom field, represented as compacted UUID using 32 hexadecimal characters.'
              name:
                type: string
                description: Name of the dropdown item
                example: Dropdown item 1
              code:
                type: string
                description: 'The code of the enumeration item, value is unique for a custom field.'
                example: Item name
              disabled:
                type: boolean
                description: Whether the enumeration item is disabled.
                example: false
          nullable: true
    custom-field-enumeration:
      type: object
      description: Represents a single custom field enumeration item.
      properties:
        id:
          type: string
          description: 'Id of the enumeration item, represented as compacted UUID using 32 hexadecimal characters.'
          example: 324409076a694255b589d236517a55da
        name:
          type: string
          description: The name of the enumeration item.
          example: Custom field name
        code:
          type: string
          description: 'The code of the enumeration item, value is unique for a custom field.'
          example: Item name
        disabled:
          type: boolean
          description: Whether the enumeration item is disabled.
          example: false
    custom-field-instance:
      type: object
      description: Represents a single custom field.
      properties:
        id:
          type: string
          description: 'Id of the custom field, represented as compacted UUID using 32 hexadecimal characters.'
          example: 324809076a694255b589d236517a55da
        disabled:
          type: boolean
          description: Whether the instance is disabled.
          example: false
        required:
          type: boolean
          description: Whether the value of the instance is non nullable.
          example: false
        defaultValue:
          type: object
          description: 'Default value for the custom field instance, required if instance is non nullable.'
        itemBeforeId:
          type: string
          description: Id of the custom field that appears before the current one. Use null if the item should be the first one.
          nullable: true
    error:
      type: object
      properties:
        code:
          type: integer
          description: The error code
        message:
          type: string
          description: The error message
    file:
      type: object
      properties:
        type:
          type: string
          description: Value is file
          example: file
        createdAt:
          type: string
          description: The date and time the file was created in ISO 8601 format
          example: 2023-12-09T10:07:56.000Z
        owner:
          type: string
          description: User id of the file owner
          example: gh7fe246cea6442834052404eth08drj
        revision:
          $ref: '#/components/schemas/library-item-document-file-revision'
    folder:
      type: object
      properties:
        type:
          type: string
          description: Value is folder
          example: folder
        createdAt:
          type: string
          description: The date and time the folder was created in ISO 8601 format
          example: 2023-12-09T10:07:56.000Z
        owner:
          type: string
          description: User id of the folder owner
          example: gh7fe246cea6442834052404eth08drj
    ifc-attributes:
      type: object
      description: 'Set of named explicit attribute values, unset attributes are omitted'
      additionalProperties:
        $ref: '#/components/schemas/ifc-value'
    ifc-classification-relation:
      type: object
    ifc-entity:
      type: object
      properties:
        objectId:
          type: integer
          format: int64
          description: The object id of the entity
          example: 83749689
        ifcType:
          type: string
          description: The entity name
          example: IfcEntity
        attributes:
          $ref: '#/components/schemas/ifc-attributes'
    ifc-group-relation:
      type: object
    ifc-group:
      type: object
    ifc-layer-relation:
      type: object
    ifc-layer:
      type: object
    ifc-product-relation:
      type: object
    ifc-product:
      type: object
      properties:
        objectId:
          type: integer
          format: int64
          description: The object id of the product
          example: 73749689
        ifcType:
          type: string
          description: The IFC type of the product set
          example: IfcEntity
        attributes:
          $ref: '#/components/schemas/ifc-attributes'
        revisionId:
          type: string
          description: The id of the revision
          example: 924809076a694255c489d236517a55da
        propertySets:
          type: object
          description: Set of named property sets associated with the product
          additionalProperties:
            $ref: '#/components/schemas/ifc-property-set'
        quantitySets:
          type: object
          description: Set of named quantity sets associated with the product
          additionalProperties:
            $ref: '#/components/schemas/ifc-quantity-set'
        materials:
          type: array
          description: List of materials associated with the product
          items:
            $ref: '#/components/schemas/ifc-entity'
        type:
          $ref: '#/components/schemas/ifc-type'
    ifc-property-set:
      type: object
      description: |
        Represents a property set (IfcPropertySet).

        A property set is an Entity containing a set of named properties.

        Property sets with names starting with "Pset_" are predefined in the Property Sets Definition.
      properties:
        objectId:
          type: integer
          format: int64
          description: The object id of the property set
          example: 12345678
        ifcType:
          type: string
          description: The IFC type of the property set
          example: IfcPropertySet
        attributes:
          $ref: '#/components/schemas/ifc-attributes'
        revisionId:
          type: string
          description: The id of the revision
          example: 924809076a694255c489d236517a55da
        properties:
          type: object
          description: Set of named properties
          additionalProperties:
            $ref: '#/components/schemas/ifc-property'
    ifc-property:
      type: object
      properties:
        description:
          type: string
          description: Description of the property
          example: Property description
        ifcType:
          type: string
          description: The IFC type of the property
          example: IfcPropertySingleValue
        nominalValue:
          $ref: '#/components/schemas/ifc-value'
        enumerationValues:
          type: array
          items:
            $ref: '#/components/schemas/ifc-value'
        listValues:
          type: array
          items:
            $ref: '#/components/schemas/ifc-value'
        lowerBoundValue:
          $ref: '#/components/schemas/ifc-value'
        upperBoundValue:
          $ref: '#/components/schemas/ifc-value'
        propertyReference:
          $ref: '#/components/schemas/ifc-value'
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ifc-property'
    ifc-quantity-set:
      type: object
      description: |
        Represents a quantity set (IfcElementQuantity).

        A property set is an Entity containing a set of named quantities.
      properties:
        objectId:
          type: integer
          format: int64
          description: The object id of the quantity set
          example: 12345678
        ifcType:
          type: string
          description: The IFC type of the quantity set
          example: IfcQuantitySet
        attributes:
          $ref: '#/components/schemas/ifc-attributes'
        revisionId:
          type: string
          description: The id of the revision
          example: 924809076a694255c489d236517a55da
        properties:
          type: object
          description: Set of named quantities
          additionalProperties:
            $ref: '#/components/schemas/ifc-quantity'
    ifc-quantity:
      type: object
      description: Represents a physical quantity that can be associated with IFC objects using quantity sets
      properties:
        description:
          type: string
          description: Description of the quantity
          example: Quantity description
        ifcType:
          type: string
          description: The IFC type of the quantity
          example: IfcElementQuantity
        value:
          $ref: '#/components/schemas/ifc-value'
    ifc-type-relation:
      type: object
    ifc-type:
      type: object
      description: Represents common type information associated with a IFC product.
      properties:
        objectId:
          type: integer
          format: int64
          description: The object id of the type
          example: 75749589
        ifcType:
          type: string
          description: The IFC type of the type
          example: IfcEntity
        attributes:
          $ref: '#/components/schemas/ifc-attributes'
        revisionId:
          type: string
          description: The id of the revision
          example: 924809076a694255c489d236517a55da
        propertySets:
          type: object
          description: Set of named property sets associated with the type
          additionalProperties:
            $ref: '#/components/schemas/ifc-property-set'
        quantitySets:
          type: object
          description: Set of named quantity sets associated with the type
          additionalProperties:
            $ref: '#/components/schemas/ifc-quantity-set'
        materials:
          type: array
          description: List of materials associated with the type
          items:
            $ref: '#/components/schemas/ifc-entity'
    ifc-value:
      type: object
      properties:
        ifcType:
          type: string
          description: The IFC type of the value
        type:
          type: string
          description: The data type of the value
        unit:
          type: string
          description: The unit of the value
        value:
          oneOf:
            - type: boolean
            - type: number
            - type: integer
            - type: string
            - type: array
              items:
                $ref: '#/components/schemas/ifc-product'
            - type: object
              $ref: '#/components/schemas/ifc-entity'
      example:
        GlobalId:
          ifcType: IfcGloballyUniqueId
          type: string
          value: 3AVAJgvmbEC9V$1uI4oTt6
    label-group:
      type: object
      properties:
        id:
          type: string
          description: Id of the label group
          example: 357t0ccc8f74719096c734de18fc6512
        name:
          type: string
          description: Name of the label group
          example: Group name
    label:
      type: object
      properties:
        id:
          type: string
          description: Id of the label
          example: 397t0ccc8f74619096c738de15dc6512
        name:
          type: string
          description: Name of the label
          example: Label 1
        color:
          type: string
          description: Valid RGB hexadecimal color of the label
          example: '#6aa84f'
        group:
          $ref: '#/components/schemas/label-group'
        deleted:
          type: boolean
          description: Soft deletion state of the label
          example: false
    library:
      type: object
      description: |
        A library represents an object collection.

        Types of libraries that are supported contain either documents, links, embedded values or classifications.
      properties:
        id:
          type: string
          description: 'A unique identifier for a library, represented as compacted UUID using 32 hexadecimal characters'
          example: 954803076a694255b959d236517b55da
        name:
          type: string
          description: 'The name of the library, limited to 256 characters'
          example: Library Name
        type:
          type: string
          description: 'The type of the library, valid values are **document**, **link**, **embedded_value** or **classification**'
          example: document
        createdBy:
          $ref: '#/components/schemas/user'
    library-item-association:
      type: object
      properties:
        globalId:
          type: string
          description: A 22 character IfcGloballyUniqueId.
          example: 2_TmT90tD0x9tJSTsyTb1J
        createdAt:
          type: string
          description: The date and time the association was created.
          example: '2023-12-09T10:07:56Z'
        user:
          $ref: '#/components/schemas/user'
    library-item-classification:
      type: object
      properties:
        id:
          type: string
          description: 'A unique identifier for a library item, represented as compacted UUID using 32 hexadecimal characters.'
          example: tttbe1ce36ce4b4c37f7060c76d241e7
        libraryId:
          type: string
          description: Id of the library that the item belongs to
          example: 9f71c88b7d7942ffa316c7a450c89358
        name:
          type: string
          description: The name of the library item
          example: Library item 1
        type:
          type: string
          description: 'Type of the library item, valid values are **embedded_value**'
          example: embedded_value
        parentId:
          type: string
          description: |
            A unique identifier for the parent of the library item. 

            Represented as compacted UUID using 32 hexadecimal characters.

            If no parent is present, the value is null.
          example: 502b06247f744b7492fd1a44e386f21e
          nullable: true
        classification:
          type: object
          properties:
            identification:
              type: string
              description: Identification of the classification
              example: A1
            description:
              type: string
              description: Description of the classification
              example: Classification description
        deleted:
          type: boolean
          description: Deletion status of the library item
          example: false
    library-item-classification-create:
      type: object
      properties:
        name:
          type: string
          description: The name of the library item
          example: Library item 1
        type:
          type: string
          description: 'Type of the library item, valid values are **classification**'
          example: classification
        parentId:
          type: string
          description: |
            A unique identifier for the parent of the library item. 

            Represented as compacted UUID using 32 hexadecimal characters.

            If no parent is present, the value is null.
          example: 502b06247f744b7492fd1a44e386f21e
          nullable: true
        classification:
          type: object
          properties:
            identification:
              type: string
              description: Identification of the classification
              example: A1
            description:
              type: string
              description: Description of the classification
              example: Classification description
    library-item-document:
      type: object
      properties:
        id:
          type: string
          description: 'A unique identifier for a library item, represented as compacted UUID using 32 hexadecimal characters.'
          example: tttbe1ce36ce4b4c37f7060c76d241e7
        libraryId:
          type: string
          description: Id of the library that the item belongs to
          example: 9f71c88b7d7942ffa316c7a450c89358
        name:
          type: string
          description: The name of the library item
          example: Library item 1
        type:
          type: string
          description: |
            Type of the document library item, valid values are:
              - document
              - folder
          example: document
        parentId:
          type: string
          description: |
            A unique identifier for the parent of the library item. 

            Represented as compacted UUID using 32 hexadecimal characters.

            If no parent is present, the value is null.
          example: 502b06247f744b7492fd1a44e386f21e
          nullable: true
        document:
          oneOf:
            - $ref: '#/components/schemas/file'
            - $ref: '#/components/schemas/folder'
        deleted:
          type: boolean
          description: Deletion status of the library item
          example: false
    library-item-document-create:
      type: object
      properties:
        name:
          type: string
          description: The name of the folder
          example: Folder name 1
        type:
          type: string
          description: 'The type of document, value should be set to "folder"'
          example: folder
        parentId:
          type: string
          description: |
            A unique identifier for the parent of the library item. 

            Represented as compacted UUID using 32 hexadecimal characters.

            If no parent is present, the value is null.
          example: 502b06247f744b7492fd1a44e386f21e
          nullable: true
        document:
          properties:
            type:
              type: string
              description: Value is folder
              example: folder
    library-item-document-file-revision:
      type: object
      properties:
        id:
          type: string
          description: Id of the revision
          example: h4c21c0e89774c8e92f42959c73561yh
        parentId:
          type: string
          description: |
            A unique identifier for the parent of the library item. 

            Represented as compacted UUID using 32 hexadecimal characters.

            If no parent is present, the value is null.
          nullable: true
        version:
          type: number
          description: Version of the revision
          example: 9
        name:
          type: string
          description: File name of the revision
          example: File.txt
        createdAt:
          type: string
          description: The date and time the revision was created in ISO 8601 format
          example: 2023-03-01T11:52:45.000Z
        size:
          type: number
          description: Size of the file in bytes
          example: 3745
        createdBy:
          $ref: '#/components/schemas/user'
        additionalFormats:
          type: array
          description: Additional formats available for the file revision
          items:
            type: object
            properties:
              size:
                type: number
                description: Size of the file in bytes
                example: 7147
              mediaType:
                type: string
                description: Media type of the additional format file
                example: application/xod
        downloadFileName:
          type: string
          description: Filename on disk
          example: File-1.txt
    library-item-document-token:
      type: object
      properties:
        token:
          type: string
          description: 'The token value, valid for one hour.'
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpdGVtLWlkIjoiZTc3NjU5YjliZTQzNDhkZDg1NjZiMWU3YmIwYmZkZjgiLCJsaWJyYXJ5LWlkIjoiNzZhZDFhYThjNmNiNDE1YTgxZTE0ZGVkNGU2M2Y3ZmUiLCJ1c2VyLWlkIjoiMjU1NGJiZDctMDkxZC00ZWVjLWIzMTMtOTI5OGZlNDE4YjQ5IiwidHlwZSI6ImxpYnJhcnktaXRlbSIsInByb2plY3QtaWQiOiIyYTA4OGJjZC0wOGZhLTQzOGEtODI1MS0yZDkxYjlhNTk3YTIiLCJjbGllbnQtaWQiOiI1bVBESFh6NFNJRHJ3VmYiLCJleHAiOjF3MTM5NzQ3NDF9.MJ67ENsOItZJybEYt7Yjes7AkWRuUXrT8_eWvQk5w98
        url:
          type: string
          description: A time limited URL to download the document.
          example: 'https://api.catenda.com/v2/download?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpdGVtLWlkIjoiZTc3NjU5YjliZTQzNDhkZDg1NjZiMWU3YmIwYmZkZjgiLCJsaWJyYXJ5LWlkIjoiNzZhZDFhYThjNkNiNDE1YTgxZTE0ZGVkNGU2M2Y3ZmUiLCJ1c2VyLWlkIjoiMjU1NGJiZDctMDkxZC00ZWVjLWIzMTMtOTI5OGZlNDE4YjQ5IiwidHlwZSI6ImxpYnJhcnktaXRlbSIsInByb2plY3QtaWQiOiIyYTA4OGJjZC0wOGZhLTQzOGEtODI1MS0yZDkxYjlhNTk3YTIiLCJjbGllbnQtaWQiOiI1bVBESFh6NFNJRHJ3VmYiLCJleHAiOjE3MTM5NzQ3NDF9.MJ67ENsOItZJybEYt7Yjes7AkWRuUXrT8_eWvQk5w98'
    library-item-embedded_value:
      type: object
      properties:
        id:
          type: string
          description: 'A unique identifier for a library item, represented as compacted UUID using 32 hexadecimal characters.'
          example: tttbe1ce36ce4b4c37f7060c76d241e7
        libraryId:
          type: string
          description: Id of the library that the item belongs to
          example: 9f71c88b7d7942ffa316c7a450c89358
        name:
          type: string
          description: The name of the library item
          example: Library item 1
        type:
          type: string
          description: 'Type of the library item, valid values are **embedded_value**'
          example: embedded_value
        parentId:
          type: string
          description: |
            A unique identifier for the parent of the library item. 

            Represented as compacted UUID using 32 hexadecimal characters.

            If no parent is present, the value is null.
          example: 502b06247f744b7492fd1a44e386f21e
          nullable: true
        deleted:
          type: boolean
          description: Deletion status of the library item
          example: false
    library-item-link:
      type: object
      properties:
        id:
          type: string
          description: 'A unique identifier for a library item, represented as compacted UUID using 32 hexadecimal characters.'
          example: tttbe1ce36ce4b4c37f7060c76d241e7
        libraryId:
          type: string
          description: Id of the library that the item belongs to
          example: 9f71c88b7d7942ffa316c7a450c89358
        name:
          type: string
          description: The name of the library item
          example: Library item 1
        type:
          type: string
          description: 'Type of the library item, valid values are **link**'
          example: link
        parentId:
          type: string
          description: |
            A unique identifier for the parent of the library item. 

            Represented as compacted UUID using 32 hexadecimal characters.

            If no parent is present, the value is null.
          example: 502b06247f744b7492fd1a44e386f21e
          nullable: true
        link:
          type: object
          properties:
            url:
              type: string
              description: The URL of the link
              example: 'https://www.example.com'
        deleted:
          type: boolean
          description: Deletion status of the library item
          example: false
    library-item-link-create:
      type: object
      properties:
        name:
          type: string
          description: The name of the library item
          example: Library item 1
        type:
          type: string
          description: 'Type of the library item, valid values are **link**'
          example: link
        link:
          type: object
          properties:
            url:
              type: string
              description: The URL of the link
              example: 'https://www.example.com'
    member:
      type: object
      properties:
        role:
          type: string
          description: |
            Valid values are:
              - owner
              - administrator
              - member
          example: member
        user:
          $ref: '#/components/schemas/user'
    model-revision-status:
      type: object
      properties:
        callbackUri:
          type: string
          description: The callback URI specified when uploading the revision
          example: 'https://example.com'
        filename:
          type: string
          description: The filename specified when uploading the revision
          example: ARC.ifc
        id:
          type: string
          description: 'A unique identifier for the status, represented as compacted UUID using 32 hexadecimal characters'
          example: fcbb72736862483f89d44890d47ec112
        model:
          $ref: '#/components/schemas/model'
        processing:
          type: object
          description: Represents the processing status of a pending revision
          properties:
            progress:
              type: number
              description: Processing progress as a number between 0.0 and 1.0
              example: 0
            status:
              type: string
              description: 'Valid values are **waiting**, **processing**, **success** or **failure**'
              example: waiting
            error:
              $ref: '#/components/schemas/error'
        revision:
          $ref: '#/components/schemas/model-revision'
        user:
          $ref: '#/components/schemas/user'
    model-revision:
      type: object
      description: |
        Represents a revision of a Model.

        A new revision is created by uploading an IFC model.
      properties:
        comment:
          type: string
          description: 'Text describing the revision, limited to 64K characters'
          example: Revision description
        createdAt:
          type: string
          description: The date and time the revision was created in ISO 8601 format
          example: 2016-09-26T14:45:20.000Z
        id:
          type: string
          description: 'A unique identifier for the revision, represented as compacted UUID using 32 hexadecimal characters.'
          example: 924809076a694255c489d236517a55da
        model:
          $ref: '#/components/schemas/model'
        user:
          $ref: '#/components/schemas/user'
        version:
          type: integer
          description: A number that is incremented for each new revision of a model
          example: 1
    model:
      type: object
      description: |
        Represents an IFC model as a set of Revisions.

        A large building project can contain multiple IFC models.

        They are often divided by domain (architecture, electrical, etc.)
      properties:
        id:
          type: string
          description: 'A unique identifier for a model, represented as compacted UUID using 32 hexadecimal characters'
          example: 47024671cbd642a9c7c84808d4d509f5
        name:
          type: string
          description: 'The name of the model, limited to 512 characters'
          example: Model description
    project:
      type: object
      description: |
        All data in Catenda belongs to a project and has a single owner.
      properties:
        createdAt:
          type: string
          description: The date and time the project was created in ISO 8601 format
          example: 2016-09-26T14:45:05.000Z
        description:
          type: string
          description: 'A short text describing the project, limited to 1024 characters'
          example: Project description
        id:
          type: string
          description: 'A unique identifier for the project, represented as compacted UUID using 32 hexadecimal characters'
          example: af2d8af0fa54465b89bf26dd3d92cfd0
        imageUrl:
          type: string
          description: The URL for the project cover picture
          example: 'https://api.catenda.com/v2/projects/c729538c4f674d729fd42236793e6a12/image'
        name:
          type: string
          description: 'The name of the project, limited to 512 characters'
          example: Project name
        owner:
          $ref: '#/components/schemas/user'
        siteLocation:
          type: object
          description: 'The approximate location (latitude, longitude in WGS 84) of the project'
          properties:
            longitude:
              type: string
              description: Longitude in WGS 84
              example: 8.26
            latitude:
              type: string
              description: Latitude in WGS 84
              example: 6.46
        updatedAt:
          type: string
          description: The date and time of the last change to the project in ISO 8601 format
          example: 2016-09-26T14:45:40.000Z
    scim-user:
      type: object
      properties:
        active:
          type: string
          description: Active state of the user
          example: true
        schemas:
          type: array
          description: List of schemas
          items:
            type: string
            description: The schema value
            example: 'urn:ietf:params:scim:schemas:core:2.0:User'
        id:
          type: string
          description: 'A unique identifier for the user, represented as compacted UUID using 32 hexadecimal characters'
          example: 2819c223-7f76-453a-919d-413861904646
        meta:
          type: object
          description: Meta object for the user
          properties:
            resourceType:
              type: string
              description: Resource type
              example: User
            created:
              type: string
              description: The date and time the user was created in ISO 8601 format
              example: '2011-08-01T18:29:49.793Z'
            lastModified:
              type: string
              description: The date and time the user was last modified in ISO 8601 format
              example: '2011-08-01T18:29:49.793Z'
            location:
              type: string
              description: The location of the user
              example: 'https://example.com/v2/Users/2819c223-7f76-453a-919d-413861904646'
            version:
              type: string
              description: The version of the user
              example: W\/\"f250dd84f0671c3\"
        userName:
          type: string
          description: Human readable user name
          example: john_smith@example.com
        externalId:
          type: string
          description: Identifier of the original source where the user data is taken from
          example: john_smith
        name:
          type: object
          description: Name object for the user
          properties:
            formatted:
              type: string
              description: Formatted representation of the user name
              example: JohnSmith
            familyName:
              type: string
              description: The family name of the user
              example: Smith
            givenName:
              type: string
              description: The given name of the user
              example: John
        emails:
          type: array
          description: List of emails for the user
          items:
            type: object
            properties:
              value:
                type: string
                description: Value of the email address
                example: john_smith@example.com
              primary:
                type: boolean
                description: Whether is the primary email address for the user
                example: true
              type:
                type: string
                description: Category of the email
                example: work
    topic-board:
      type: object
      properties:
        id:
          type: string
          description: 'Id of a topic board, represented as compacted UUID using 32 hexadecimal characters.'
          example: 324404076a694255b589d236517a55da
        name:
          type: string
          description: Name of the topic board.
          example: Board name
        description:
          type: string
          description: Description of the topic board.
          example: Topic board description
        customFields:
          type: array
          description: List of custom fields.
          items:
            $ref: '#/components/schemas/custom-field'
        customFieldInstances:
          type: array
          description: List of custom fields currently configured in the topic board.
          items:
            $ref: '#/components/schemas/custom-field-instance'
    user:
      type: object
      description: |
        Represents a User, Organization or Team.

        A User is someone with a Catenda account, commonly representing a person.

        An Organization represents a company, project organization or an application. Organizations do not have a username and cannot sign in to Catenda.

        A Team represents a group of users within a project. Teams do not have a username and cannot sign in to Catenda.
      properties:
        id:
          type: string
          description: Represented as compacted UUID using 32 hexadecimal characters
          example: 524809076a694255b989d236517a55da
        name:
          type: string
          description: 'The name of the user, limited to 128 characters'
          example: John Doe
        username:
          type: string
          description: |
            The handle the user identifies with. 

            Commonly the username will be in email address format. Usernames are unique but subject to change, we recommend using the id field to reference users instead.

            If the user represents an organization or a team the value is always null.

            Limited to 50 characters.
          example: john@doe.com
          nullable: true
        email:
          type: string
          description: Email address of the User
          example: john@doe.com
        createdAt:
          type: string
          description: The date and time the user was created in ISO 8601 format
          example: 2016-09-20T14:55:22.000Z
        avatarUrl:
          type: string
          description: The URL for the user avatar
          example: 'https://api.catenda.com/v2/avatar/397t0ccd8f74516096c738de15dc6512'
        type:
          type: string
          description: |
            The type of user, valid values are:
              - user
              - organization
              - team
          example: user
    viewer-2d-token:
      type: object
      description: 'Represents a time limited access token to grant access to viewer data, valid for one hour.'
      properties:
        revisions:
          type: array
          description: The set of revisions the token grants access to
          items:
            $ref: '#/components/schemas/model-revision'
        token:
          type: string
          description: 'The token value, valid for one hour.'
          example: ba16ee5e36054019917210c4559bcca0
        url:
          type: string
          description: URL used to load models within a viewer instance
          example: 'https://api.catenda.com/v2/projects/1a099bcd08da438a82512d45b9a534a2/viewer2d/geometry?token=ba16ee5e36054019917210c4559bcca0'
    viewer-3d-token:
      type: object
      description: 'Represents a time limited access token to grant access to viewer data, valid for one hour.'
      properties:
        revisions:
          type: array
          description: The set of revisions the token grants access to
          items:
            $ref: '#/components/schemas/model-revision'
        token:
          type: string
          description: 'The token value, valid for one hour.'
          example: ba16ee5e36054019917210c4559bcca0
        url:
          type: string
          description: URL used to load models within a viewer instance
          example: 'https://api.catenda.com/v2/projects/1a099bcd08da438a82512d45b9a534a2/viewer3d/data?token=ba16ee5e36054019917210c4559bcca0'
    webhook-subscription:
      type: object
      description: Represents the subscription to an event with an associated callback.
      properties:
        id:
          type: string
          description: 'A unique identifier for a Webhook, represented as compacted UUID using 32 hexadecimal characters'
          example: 57d5457e09d64380af75da94ed96557h
        target_url:
          type: string
          description: The URL to be called when the event occurs
          example: 'https://hooks.zapier.com/hooks/catch/1028857/a8w0or/'
        createdAt:
          type: string
          description: Creation date of the Webhook
          example: '2019-02-13T14:15:18Z"'
        state:
          type: string
          description: |
            The state of the Webhook.

            Valid values are: 
              - ENABLED
              - DISABLED_GONE
              - DISABLED_TOO_MANY_FAILURES
              - DISABLED_BY_USER
        failureCount:
          type: number
          description: The number of times the Webhook has failed
          example: 0
        event:
          type: string
          description: |
            The event that triggers the callback URL.

            Valid values are: 
              - issue.created
              - issue.deleted
              - issue.modified
              - issue.status.changed
              - library.document.revision.published
              - model.created
              - revision.created
          example: issue.created
  securitySchemes:
    OAuth:
      type: oauth2
      description: This API uses OAuth 2
      flows:
        authorizationCode:
          authorizationUrl: 'https://api.catenda.com/oauth2/authorize?redirect_uri=https://eo8vs2d9uj5gugx.m.pipedream.net'
          tokenUrl: 'https://api.catenda.com/oauth2/token'
          refreshUrl: 'https://api.catenda.com/oauth2/token'
